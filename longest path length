//Given a matrix of N rows and M columns. From m[i][j], we can move to m[i+1][j], if m[i+1][j] > m[i][j], or can move to m[i][j+1] if m[i][j+1] > m[i][j]. The task is to print the longest path length if we start from (0, 0).


// You are using Java
import java.util.*;
class Main{
public static void main(String[] args ){
    Scanner sc=new Scanner(System.in);
    int n=sc.nextInt();
    int m=sc.nextInt();
    int[][] matrix=new int[n][m];
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            matrix[i][j]=sc.nextInt();
        }
    }
    int count=cal(n,m,matrix);
    System.out.print(count);
}
public static int cal(int n,int m,int[][] matrix){
    int count=1;
    int sum=matrix[0][0];
    for(int i=0;i<n;i++){
        //int sum=matrix[i][0];
        for(int j=0;j<m;j++){
           // int sum=matrix[i][j];
            if(i+1<n && matrix[i+1][j]>sum){
                sum=matrix[i+1][j];
                count++;
            }
            if(j+1<m && matrix[i][j+1]>sum){
                sum=matrix[i][j+1];
                count++;
            }
        }
    }
    return count;
}
}
